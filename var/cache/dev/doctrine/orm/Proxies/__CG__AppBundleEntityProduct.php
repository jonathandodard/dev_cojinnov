<?php

namespace Proxies\__CG__\AppBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Product extends \AppBundle\Entity\Product implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'type', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'reference', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'category', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'conditionProduct', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'duration', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'pcb', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'saleUnit', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'tg', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'ts', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'tb', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'taOne', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'taTwo', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'ppdia'];
        }

        return ['__isInitialized__', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'id', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'type', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'reference', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'name', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'category', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'conditionProduct', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'duration', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'pcb', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'saleUnit', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'tg', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'ts', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'tb', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'taOne', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'taTwo', '' . "\0" . 'AppBundle\\Entity\\Product' . "\0" . 'ppdia'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Product $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function setReference($reference)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReference', [$reference]);

        return parent::setReference($reference);
    }

    /**
     * {@inheritDoc}
     */
    public function getReference()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReference', []);

        return parent::getReference();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory($category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setConditionProduct($conditionProduct)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setConditionProduct', [$conditionProduct]);

        return parent::setConditionProduct($conditionProduct);
    }

    /**
     * {@inheritDoc}
     */
    public function getConditionProduct()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getConditionProduct', []);

        return parent::getConditionProduct();
    }

    /**
     * {@inheritDoc}
     */
    public function setDuration($duration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDuration', [$duration]);

        return parent::setDuration($duration);
    }

    /**
     * {@inheritDoc}
     */
    public function getDuration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDuration', []);

        return parent::getDuration();
    }

    /**
     * {@inheritDoc}
     */
    public function setPcb($pcb)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPcb', [$pcb]);

        return parent::setPcb($pcb);
    }

    /**
     * {@inheritDoc}
     */
    public function getPcb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPcb', []);

        return parent::getPcb();
    }

    /**
     * {@inheritDoc}
     */
    public function setSaleUnit($saleUnit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSaleUnit', [$saleUnit]);

        return parent::setSaleUnit($saleUnit);
    }

    /**
     * {@inheritDoc}
     */
    public function getSaleUnit()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSaleUnit', []);

        return parent::getSaleUnit();
    }

    /**
     * {@inheritDoc}
     */
    public function setTg($tg)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTg', [$tg]);

        return parent::setTg($tg);
    }

    /**
     * {@inheritDoc}
     */
    public function getTg()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTg', []);

        return parent::getTg();
    }

    /**
     * {@inheritDoc}
     */
    public function setTs($ts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTs', [$ts]);

        return parent::setTs($ts);
    }

    /**
     * {@inheritDoc}
     */
    public function getTs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTs', []);

        return parent::getTs();
    }

    /**
     * {@inheritDoc}
     */
    public function setTb($tb)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTb', [$tb]);

        return parent::setTb($tb);
    }

    /**
     * {@inheritDoc}
     */
    public function getTb()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTb', []);

        return parent::getTb();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaOne($taOne)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaOne', [$taOne]);

        return parent::setTaOne($taOne);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaOne()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaOne', []);

        return parent::getTaOne();
    }

    /**
     * {@inheritDoc}
     */
    public function setTaTwo($taTwo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTaTwo', [$taTwo]);

        return parent::setTaTwo($taTwo);
    }

    /**
     * {@inheritDoc}
     */
    public function getTaTwo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTaTwo', []);

        return parent::getTaTwo();
    }

    /**
     * {@inheritDoc}
     */
    public function setPpdia($ppdia)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPpdia', [$ppdia]);

        return parent::setPpdia($ppdia);
    }

    /**
     * {@inheritDoc}
     */
    public function getPpdia()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPpdia', []);

        return parent::getPpdia();
    }

}
